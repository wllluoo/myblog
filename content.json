{"meta":{"title":"小陀螺的博客","subtitle":null,"description":null,"author":"wllluoo","url":"https://wllluoo.github.io/myblog"},"pages":[],"posts":[{"title":"特效：浏览器滚动时，文字滑入特效","slug":"fade","date":"2017-10-21T16:00:00.000Z","updated":"2018-02-17T14:38:54.000Z","comments":true,"path":"2017/10/22/fade/","link":"","permalink":"https://wllluoo.github.io/myblog/2017/10/22/fade/","excerpt":"","text":"1.首先要获取内容进入屏幕边缘的零界点 可以通过 滚轮移动端距离 + 浏览器窗口大小 &gt; 元素距离页面顶部的距离来进行判断。 监听浏览器滚动事件： 123456//给页面绑定滑轮滚动事件if (document.addEventListener) &#123;//firefox document.addEventListener('DOMMouseScroll', scrollFun, false);&#125;//滚动滑轮触发scrollFunc方法 //ie 谷歌window.onmousewheel = document.onmousewheel = scrollFun; 若是移动端还需加上：1document.addEventListener('scroll',scrollFun, false); 2.处理滚动事件：当元素进入浏览器边缘时，对该元素添加一个class，令其具有滑入的特效。因此给需要有滑入特效的元素事先增加自定义的class，以便选中。 1234function revealOnScroll() &#123; var scrolled = $(window).scrollTop(); // 获取滚动条移动的距离，即移动的位移 scrollFadeUpFun(scrolled, 'fade’); // 选中所有class为fade的元素 &#125; 3.获取浏览器高度：1var windowHeight = document.body.clientHeight; 4.操作元素：12345678910function scrollFadeUpFun(scrolled, element) &#123; $(\".\" + element).each(function() &#123; var $this = $(this), fadeOffsetTop = $this.offset().top; // 该元素在dom中距离顶部的距离 if (windowHeight + scrolled &gt; fadeOffsetTop) &#123; // 当 窗口高度 + 滚动的高度 &gt; 元素在dom中距离顶部的距离 即进入浏览器的下边缘时 $this.addClass('fade_up'); &#125; &#125;); &#125; 5.html中, 定义需滑入的元素1234&lt;div class='fade'&gt; &lt;p&gt;回顾所来径&lt;/p&gt; &lt;p&gt;苍苍横翠薇&lt;/p&gt;&lt;/div&gt; 6.给元素增加滑入渐变特效，如下所示，即元素的透明度从0.1变为1, 位置从80px还原为0px。12345678910111213元素自身样式 .fade &#123; display: block; transform: translateY(80px); opacity: 0.1; &#125; 定义滑入样式 .fade_up &#123; transform: translateY(0px); -webkit-transition: -webkit-transform .8s ease-out, opacity .8s ease-in; transition: transform .8s ease-out, opacity .8s ease-in-out; opacity: 1; &#125;","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://wllluoo.github.io/myblog/tags/js/"}]},{"title":"typescript测试之小试牛刀","slug":"typescript","date":"2017-09-02T16:00:00.000Z","updated":"2018-02-17T14:51:12.000Z","comments":true,"path":"2017/09/03/typescript/","link":"","permalink":"https://wllluoo.github.io/myblog/2017/09/03/typescript/","excerpt":"","text":"TypeScript基于接口的强类型定义，能很好的弥补javascript语言的先天不足，并且遵循了es6标准，因此只要掌握了 TypeScript ，就相当于掌握了 JavaScript 语言的最新标准，并且能在老式浏览器上完整运行（先吹一波）。 1.变量定义1234const test: string = 'nihao’; // 字符串const aaa: number = 12121; // 数字const member: string[] = ['111', '222', '3333']; // 字符串类型的数组console.log(member.toString()); // 111,222,3333 若不按给定的类型定义，将报错，如下：12const aaa: number = '12121'; // 报错： Type '\"12121\"' is not assignable to type 'number'. 2.接口的使用例1:12345678910interface SuperHero &#123; realName: String; superName: String;&#125;const superman: SuperHero = &#123; realName: 'spiderman', // 需给出符合 SuperHero接口的数据类型的定义 superName: 'superman',&#125;;console.log(`$&#123;superman.realName&#125; is a $&#123;superman.superName&#125;`);// spiderman is a superman 例2:123456789101112interface SuperHero &#123; realName: String; superName: String; &#125;// 定义一个 SuperHero类型的数组, SuperHero的值，需是符合SuperHero借口定义的对象。const SuperHeroes: SuperHero[] = []; SuperHeroes.push(&#123; realName: 'Ah way', superName: 'superman', &#125;);console.log(`$&#123;SuperHeroes[0].realName&#125; is a $&#123;SuperHeroes[0].superName&#125;`);// Ah way is a superman 3.方法的使用：例1:12345// 定义一个接收两个number参数的方法，并返回数字类型的和const getSum = function (num1: number, num2: number): number &#123; return num1 + num2;&#125;;const sum1 = getSum(2, 5); // 7 例2:123456789// 定义一个方法，其中num2 赋值为2, num3可不传或为number类型的参数const getSum = function (num1: number, num2 = 2, num3?: number): number &#123; if (typeof num3 !== 'undefined') &#123; return num1 + num2 + num3; &#125; return num1 + num2;&#125;;const sum1 = getSum(5); // 7const sum2 = getSum(5, 2, 1); // 8 例3:12345// 定义一个方法，接收多个number的参数，并将所有参数整合为数组const getSum = function (...nums: number[]): void &#123; const sum = nums.reduce((a, b) =&gt; a + b, 0); &#125;;getSum(5, 2, 1); // 8 4.类继承接口的使用123456789101112// 定义一个有drive参数的Vehicle接口，其中drive可以是任意的数据类型interface Vehicle &#123; drive: any;&#125;class Car implements Vehicle &#123; // 定义一个Car继承Vehicle接口 constructor(private wheels: number)&#123;&#125; //构造器去接收wheels参数 drive() : void &#123; console.log('this.wheels', this.wheels); &#125;&#125;var car = new Car(4); // 实例化一个Car对象car.drive(); // this.wheels : 4 5.接收固定参数的方法1234567function GetType&lt;T&gt;(val: T): string &#123; return typeof (val);&#125;const testStr = 'test';const testNum = 123;GetType(testStr); // stringGetType(testNum); // number 6. 方法继承接口的使用123456789101112131415interface Vehicle &#123; drive: any;&#125;class Car implements Vehicle &#123; // constructor(private wheels: number)&#123;&#125; drive(): void &#123; console.log('this.wheels', this.wheels); &#125;&#125;var car = new Car(4); function GetWheels&lt;w extends Vehicle&gt; (veh: w): number &#123; return veh.drive();&#125;GetWheels(car); // this.wheels : 4 7. 接收固定参数的类12345678910// 构造一个GenericNumber类，其中有add方法，接收一个参数，作为add方法参数的类型class GenericNumber&lt;T&gt;&#123; add: (val1: T, val2: T) =&gt; T;&#125;var aNumber = new GenericNumber&lt;number&gt;(); // new 一个GenericNumber类的实例，并定义add方法接收Number类型的参数aNumber.add = function(x, y) &#123; return x + y;&#125;console.log(aNumber.add(5, 4)); // 9console.log(aNumber.add('5', '4')); // 报错 Argument of type '\"5\"' is not assignable to parameter of type 'number'.","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://wllluoo.github.io/myblog/tags/TypeScript/"}]}]}