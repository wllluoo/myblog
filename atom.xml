<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小陀螺的博客</title>
  
  
  <link href="/myblog/atom.xml" rel="self"/>
  
  <link href="https://wllluoo.github.io/myblog/"/>
  <updated>2018-02-17T14:38:54.000Z</updated>
  <id>https://wllluoo.github.io/myblog/</id>
  
  <author>
    <name>wllluoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>特效：浏览器滚动时，文字滑入特效</title>
    <link href="https://wllluoo.github.io/myblog/2017/10/22/fade/"/>
    <id>https://wllluoo.github.io/myblog/2017/10/22/fade/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2018-02-17T14:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-首先要获取内容进入屏幕边缘的零界点"><a href="#1-首先要获取内容进入屏幕边缘的零界点" class="headerlink" title="1.首先要获取内容进入屏幕边缘的零界点"></a>1.首先要获取内容进入屏幕边缘的零界点</h2><p>  可以通过 滚轮移动端距离 + 浏览器窗口大小 &gt; 元素距离页面顶部的距离来进行判断。<br>  监听浏览器滚动事件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//给页面绑定滑轮滚动事件</span><br><span class="line"><span class="keyword">if</span> (document.addEventListener) &#123;//firefox</span><br><span class="line">  document.addEventListener(<span class="string">'DOMMouseScroll'</span>, scrollFun, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">//滚动滑轮触发scrollFunc方法 //ie 谷歌</span><br><span class="line">window.onmousewheel = document.onmousewheel = scrollFun;</span><br></pre></td></tr></table></figure><h5 id="若是移动端还需加上："><a href="#若是移动端还需加上：" class="headerlink" title="若是移动端还需加上："></a>若是移动端还需加上：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(<span class="string">'scroll'</span>,scrollFun, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="2-处理滚动事件："><a href="#2-处理滚动事件：" class="headerlink" title="2.处理滚动事件："></a>2.处理滚动事件：</h2><pre><code>当元素进入浏览器边缘时，对该元素添加一个class，令其具有滑入的特效。因此给需要有滑入特效的元素事先增加自定义的class，以便选中。 </code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">revealOnScroll</span></span>() &#123;</span><br><span class="line">      var scrolled = $(window).scrollTop();  // 获取滚动条移动的距离，即移动的位移</span><br><span class="line">      scrollFadeUpFun(scrolled, <span class="string">'fade’); // 选中所有class为fade的元素</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-获取浏览器高度："><a href="#3-获取浏览器高度：" class="headerlink" title="3.获取浏览器高度："></a>3.获取浏览器高度：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var windowHeight = document.body.clientHeight;</span><br></pre></td></tr></table></figure><h2 id="4-操作元素："><a href="#4-操作元素：" class="headerlink" title="4.操作元素："></a>4.操作元素：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> scrollFadeUpFun(scrolled, element) &#123;</span><br><span class="line">  $(<span class="string">"."</span> + element).each(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    var <span class="variable">$this</span> = $(this),</span><br><span class="line">    fadeOffsetTop = <span class="variable">$this</span>.offset().top; // 该元素在dom中距离顶部的距离</span><br><span class="line">    <span class="keyword">if</span> (windowHeight + scrolled &gt; fadeOffsetTop) &#123;</span><br><span class="line">      // 当 窗口高度 + 滚动的高度 &gt; 元素在dom中距离顶部的距离 即进入浏览器的下边缘时</span><br><span class="line">      <span class="variable">$this</span>.addClass(<span class="string">'fade_up'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="5-html中-定义需滑入的元素"><a href="#5-html中-定义需滑入的元素" class="headerlink" title="5.html中, 定义需滑入的元素"></a>5.html中, 定义需滑入的元素</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">'fade'</span>&gt;</span><br><span class="line">      &lt;p&gt;回顾所来径&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;苍苍横翠薇&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="6-给元素增加滑入渐变特效，如下所示，即元素的透明度从0-1变为1-位置从80px还原为0px。"><a href="#6-给元素增加滑入渐变特效，如下所示，即元素的透明度从0-1变为1-位置从80px还原为0px。" class="headerlink" title="6.给元素增加滑入渐变特效，如下所示，即元素的透明度从0.1变为1, 位置从80px还原为0px。"></a>6.给元素增加滑入渐变特效，如下所示，即元素的透明度从0.1变为1, 位置从80px还原为0px。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">元素自身样式</span><br><span class="line">  .fade &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  transform: translateY(80px);</span><br><span class="line">  opacity: 0.1;</span><br><span class="line">  &#125;</span><br><span class="line">  定义滑入样式</span><br><span class="line">  .fade_up &#123;</span><br><span class="line">  transform: translateY(0px);</span><br><span class="line">  -webkit-transition: -webkit-transform .8s ease-out, opacity .8s ease-in;</span><br><span class="line">  transition: transform .8s ease-out, opacity .8s ease-in-out;</span><br><span class="line">  opacity: 1;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-首先要获取内容进入屏幕边缘的零界点&quot;&gt;&lt;a href=&quot;#1-首先要获取内容进入屏幕边缘的零界点&quot; class=&quot;headerlink&quot; title=&quot;1.首先要获取内容进入屏幕边缘的零界点&quot;&gt;&lt;/a&gt;1.首先要获取内容进入屏幕边缘的零界点&lt;/h2&gt;&lt;p&gt;  
      
    
    </summary>
    
    
      <category term="js" scheme="https://wllluoo.github.io/myblog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>typescript测试之小试牛刀</title>
    <link href="https://wllluoo.github.io/myblog/2017/09/03/typescript/"/>
    <id>https://wllluoo.github.io/myblog/2017/09/03/typescript/</id>
    <published>2017-09-02T16:00:00.000Z</published>
    <updated>2018-02-17T14:51:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript基于接口的强类型定义，能很好的弥补javascript语言的先天不足，并且遵循了es6标准，因此只要掌握了 TypeScript ，就相当于掌握了 JavaScript 语言的最新标准，并且能在老式浏览器上完整运行（先吹一波）。</p><h2 id="1-变量定义"><a href="#1-变量定义" class="headerlink" title="1.变量定义"></a>1.变量定义</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">test</span>: string = <span class="string">'nihao’; // 字符串</span></span><br><span class="line"><span class="string">const aaa: number = 12121;   // 数字</span></span><br><span class="line"><span class="string">const member: string[] = ['</span>111<span class="string">', '</span>222<span class="string">', '</span>3333<span class="string">']; // 字符串类型的数组</span></span><br><span class="line"><span class="string">console.log(member.toString()); // 111,222,3333</span></span><br></pre></td></tr></table></figure><h5 id="若不按给定的类型定义，将报错，如下："><a href="#若不按给定的类型定义，将报错，如下：" class="headerlink" title="若不按给定的类型定义，将报错，如下："></a>若不按给定的类型定义，将报错，如下：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const aaa: number = <span class="string">'12121'</span>;  </span><br><span class="line">// 报错： Type <span class="string">'"12121"'</span> is not assignable to <span class="built_in">type</span> <span class="string">'number'</span>.</span><br></pre></td></tr></table></figure><h2 id="2-接口的使用"><a href="#2-接口的使用" class="headerlink" title="2.接口的使用"></a>2.接口的使用</h2><p>例1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface SuperHero &#123;</span><br><span class="line">    realName: String;</span><br><span class="line">    superName: String;</span><br><span class="line">&#125;</span><br><span class="line">const superman: SuperHero = &#123;</span><br><span class="line">  realName: <span class="string">'spiderman'</span>,    // 需给出符合 SuperHero接口的数据类型的定义 </span><br><span class="line">  superName: <span class="string">'superman'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">console.log(`<span class="variable">$&#123;superman.realName&#125;</span> is a <span class="variable">$&#123;superman.superName&#125;</span>`);</span><br><span class="line">// spiderman is a superman</span><br></pre></td></tr></table></figure></p><p>例2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface SuperHero &#123;</span><br><span class="line">        realName: String;</span><br><span class="line">        superName: String;</span><br><span class="line">    &#125;</span><br><span class="line">// 定义一个 SuperHero类型的数组, SuperHero的值，需是符合SuperHero借口定义的对象。</span><br><span class="line">const SuperHeroes: SuperHero[] = [];  </span><br><span class="line">    SuperHeroes.push(&#123;</span><br><span class="line">      realName: <span class="string">'Ah way'</span>,</span><br><span class="line">      superName: <span class="string">'superman'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">console.log(`<span class="variable">$&#123;SuperHeroes[0].realName&#125;</span> is a <span class="variable">$&#123;SuperHeroes[0].superName&#125;</span>`);</span><br><span class="line">// Ah way is a superman</span><br></pre></td></tr></table></figure></p><h2 id="3-方法的使用："><a href="#3-方法的使用：" class="headerlink" title="3.方法的使用："></a>3.方法的使用：</h2><p>例1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个接收两个number参数的方法，并返回数字类型的和</span><br><span class="line">const getSum = <span class="keyword">function</span> (num1: number, num2: number): number &#123;    </span><br><span class="line">  <span class="built_in">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br><span class="line">const sum1 = getSum(2, 5); // 7</span><br></pre></td></tr></table></figure></p><p>例2:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个方法，其中num2 赋值为2, num3可不传或为number类型的参数</span><br><span class="line">const getSum = <span class="keyword">function</span> (num1: number, num2 = 2, num3?: number): number &#123; </span><br><span class="line">  <span class="keyword">if</span> (typeof num3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> num1 + num2 + num3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br><span class="line">const sum1 = getSum(5); // 7</span><br><span class="line">const sum2 = getSum(5, 2, 1); // 8</span><br></pre></td></tr></table></figure></p><p>例3:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个方法，接收多个number的参数，并将所有参数整合为数组</span><br><span class="line">const getSum = <span class="keyword">function</span> (...nums: number[]): void &#123; </span><br><span class="line">      const sum = nums.reduce((a, b) =&gt; a + b, 0);     </span><br><span class="line">    &#125;;</span><br><span class="line">getSum(5, 2, 1);  // 8</span><br></pre></td></tr></table></figure></p><h2 id="4-类继承接口的使用"><a href="#4-类继承接口的使用" class="headerlink" title="4.类继承接口的使用"></a>4.类继承接口的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个有drive参数的Vehicle接口，其中drive可以是任意的数据类型</span><br><span class="line">interface Vehicle &#123;   </span><br><span class="line">    drive: any;</span><br><span class="line">&#125;</span><br><span class="line">class Car implements Vehicle &#123;  // 定义一个Car继承Vehicle接口</span><br><span class="line">    constructor(private wheels: number)&#123;&#125; //构造器去接收wheels参数</span><br><span class="line">    drive() : void &#123; </span><br><span class="line">        console.log(<span class="string">'this.wheels'</span>, this.wheels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var car = new Car(4); // 实例化一个Car对象</span><br><span class="line">car.drive(); // this.wheels : 4</span><br></pre></td></tr></table></figure><h2 id="5-接收固定参数的方法"><a href="#5-接收固定参数的方法" class="headerlink" title="5.接收固定参数的方法"></a>5.接收固定参数的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> GetType&lt;T&gt;(val: T): string &#123;</span><br><span class="line">  <span class="built_in">return</span> typeof (val);</span><br><span class="line">&#125;</span><br><span class="line">const testStr = <span class="string">'test'</span>;</span><br><span class="line">const testNum = 123;</span><br><span class="line">GetType(testStr); // string</span><br><span class="line">GetType(testNum); // number</span><br></pre></td></tr></table></figure><h2 id="6-方法继承接口的使用"><a href="#6-方法继承接口的使用" class="headerlink" title="6. 方法继承接口的使用"></a>6. 方法继承接口的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface Vehicle &#123;    </span><br><span class="line">    drive: any;</span><br><span class="line">&#125;</span><br><span class="line">class Car implements Vehicle &#123; // </span><br><span class="line">    constructor(private wheels: number)&#123;&#125;</span><br><span class="line">    drive(): void &#123;</span><br><span class="line">        console.log(<span class="string">'this.wheels'</span>, this.wheels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var car = new Car(4);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> GetWheels&lt;w extends Vehicle&gt; (veh: w): number &#123;</span><br><span class="line">    <span class="built_in">return</span> veh.drive();</span><br><span class="line">&#125;</span><br><span class="line">GetWheels(car); // this.wheels : 4</span><br></pre></td></tr></table></figure><h2 id="7-接收固定参数的类"><a href="#7-接收固定参数的类" class="headerlink" title="7. 接收固定参数的类"></a>7. 接收固定参数的类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 构造一个GenericNumber类，其中有add方法，接收一个参数，作为add方法参数的类型</span><br><span class="line">class GenericNumber&lt;T&gt;&#123;  </span><br><span class="line">    add: (val1: T, val2: T) =&gt; T;</span><br><span class="line">&#125;</span><br><span class="line">var aNumber = new GenericNumber&lt;number&gt;(); // new 一个GenericNumber类的实例，并定义add方法接收Number类型的参数</span><br><span class="line">aNumber.add = <span class="keyword">function</span>(x, y) &#123;</span><br><span class="line">    <span class="built_in">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">console.log(aNumber.add(5, 4));  // 9</span><br><span class="line">console.log(aNumber.add(<span class="string">'5'</span>, <span class="string">'4'</span>));  // 报错 Argument of <span class="built_in">type</span> <span class="string">'"5"'</span> is not assignable to parameter of <span class="built_in">type</span> <span class="string">'number'</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TypeScript基于接口的强类型定义，能很好的弥补javascript语言的先天不足，并且遵循了es6标准，因此只要掌握了 TypeScript ，就相当于掌握了 JavaScript 语言的最新标准，并且能在老式浏览器上完整运行（先吹一波）。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="https://wllluoo.github.io/myblog/tags/TypeScript/"/>
    
  </entry>
  
</feed>
